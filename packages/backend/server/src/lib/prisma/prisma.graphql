# source: http://localhost:4467/Postgres/dev
# timestamp: Sat Aug 17 2019 17:13:57 GMT+0200 (Central European Summer Time)

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  user(where: UserWhereUniqueInput!): User
  transaction(where: TransactionWhereUniqueInput!): Transaction
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
}

type Transaction implements Node {
  id: ID!
  date: DateTime
  product: String
  isin: String
  market: String
  quantity: Int
  rate: Float
  localValue: Float
  value: Float
  exchangeRate: Float
  cost: Float
  total: Float
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  date: DateTime
  product: String
  isin: String
  market: String
  quantity: Int
  rate: Float
  localValue: Float
  value: Float
  exchangeRate: Float
  cost: Float
  total: Float
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  product_ASC
  product_DESC
  isin_ASC
  isin_DESC
  market_ASC
  market_DESC
  quantity_ASC
  quantity_DESC
  rate_ASC
  rate_DESC
  localValue_ASC
  localValue_DESC
  value_ASC
  value_DESC
  exchangeRate_ASC
  exchangeRate_DESC
  cost_ASC
  cost_DESC
  total_ASC
  total_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  date: DateTime
  product: String
  isin: String
  market: String
  quantity: Int
  rate: Float
  localValue: Float
  value: Float
  exchangeRate: Float
  cost: Float
  total: Float
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  date: DateTime
  product: String
  isin: String
  market: String
  quantity: Int
  rate: Float
  localValue: Float
  value: Float
  exchangeRate: Float
  cost: Float
  total: Float
}

input TransactionUpdateManyMutationInput {
  date: DateTime
  product: String
  isin: String
  market: String
  quantity: Int
  rate: Float
  localValue: Float
  value: Float
  exchangeRate: Float
  cost: Float
  total: Float
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  product: String

  """All values that are not equal to given value."""
  product_not: String

  """All values that are contained in given list."""
  product_in: [String!]

  """All values that are not contained in given list."""
  product_not_in: [String!]

  """All values less than the given value."""
  product_lt: String

  """All values less than or equal the given value."""
  product_lte: String

  """All values greater than the given value."""
  product_gt: String

  """All values greater than or equal the given value."""
  product_gte: String

  """All values containing the given string."""
  product_contains: String

  """All values not containing the given string."""
  product_not_contains: String

  """All values starting with the given string."""
  product_starts_with: String

  """All values not starting with the given string."""
  product_not_starts_with: String

  """All values ending with the given string."""
  product_ends_with: String

  """All values not ending with the given string."""
  product_not_ends_with: String
  isin: String

  """All values that are not equal to given value."""
  isin_not: String

  """All values that are contained in given list."""
  isin_in: [String!]

  """All values that are not contained in given list."""
  isin_not_in: [String!]

  """All values less than the given value."""
  isin_lt: String

  """All values less than or equal the given value."""
  isin_lte: String

  """All values greater than the given value."""
  isin_gt: String

  """All values greater than or equal the given value."""
  isin_gte: String

  """All values containing the given string."""
  isin_contains: String

  """All values not containing the given string."""
  isin_not_contains: String

  """All values starting with the given string."""
  isin_starts_with: String

  """All values not starting with the given string."""
  isin_not_starts_with: String

  """All values ending with the given string."""
  isin_ends_with: String

  """All values not ending with the given string."""
  isin_not_ends_with: String
  market: String

  """All values that are not equal to given value."""
  market_not: String

  """All values that are contained in given list."""
  market_in: [String!]

  """All values that are not contained in given list."""
  market_not_in: [String!]

  """All values less than the given value."""
  market_lt: String

  """All values less than or equal the given value."""
  market_lte: String

  """All values greater than the given value."""
  market_gt: String

  """All values greater than or equal the given value."""
  market_gte: String

  """All values containing the given string."""
  market_contains: String

  """All values not containing the given string."""
  market_not_contains: String

  """All values starting with the given string."""
  market_starts_with: String

  """All values not starting with the given string."""
  market_not_starts_with: String

  """All values ending with the given string."""
  market_ends_with: String

  """All values not ending with the given string."""
  market_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  rate: Float

  """All values that are not equal to given value."""
  rate_not: Float

  """All values that are contained in given list."""
  rate_in: [Float!]

  """All values that are not contained in given list."""
  rate_not_in: [Float!]

  """All values less than the given value."""
  rate_lt: Float

  """All values less than or equal the given value."""
  rate_lte: Float

  """All values greater than the given value."""
  rate_gt: Float

  """All values greater than or equal the given value."""
  rate_gte: Float
  localValue: Float

  """All values that are not equal to given value."""
  localValue_not: Float

  """All values that are contained in given list."""
  localValue_in: [Float!]

  """All values that are not contained in given list."""
  localValue_not_in: [Float!]

  """All values less than the given value."""
  localValue_lt: Float

  """All values less than or equal the given value."""
  localValue_lte: Float

  """All values greater than the given value."""
  localValue_gt: Float

  """All values greater than or equal the given value."""
  localValue_gte: Float
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  exchangeRate: Float

  """All values that are not equal to given value."""
  exchangeRate_not: Float

  """All values that are contained in given list."""
  exchangeRate_in: [Float!]

  """All values that are not contained in given list."""
  exchangeRate_not_in: [Float!]

  """All values less than the given value."""
  exchangeRate_lt: Float

  """All values less than or equal the given value."""
  exchangeRate_lte: Float

  """All values greater than the given value."""
  exchangeRate_gt: Float

  """All values greater than or equal the given value."""
  exchangeRate_gte: Float
  cost: Float

  """All values that are not equal to given value."""
  cost_not: Float

  """All values that are contained in given list."""
  cost_in: [Float!]

  """All values that are not contained in given list."""
  cost_not_in: [Float!]

  """All values less than the given value."""
  cost_lt: Float

  """All values less than or equal the given value."""
  cost_lte: Float

  """All values greater than the given value."""
  cost_gt: Float

  """All values greater than or equal the given value."""
  cost_gte: Float
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
}

input TransactionWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
